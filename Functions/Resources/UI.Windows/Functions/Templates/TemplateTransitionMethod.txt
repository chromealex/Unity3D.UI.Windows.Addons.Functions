		
		public class FlowFunction{FUNCTION_CALL_NAME}Routes : WindowRoutes {
			
			public FlowFunction{FUNCTION_CALL_NAME}Routes(IFunctionIteration window, int index) : base(window, index) {}
			{TRANSITION_METHODS}
		}

		/// <summary>
		/// Call the Function {FUNCTION_CALL_NAME}.
		/// Use this method to play transition effect on B window only.
		/// If you call Hide() on A window - it will hide with standard behaviour.
		/// Function: {FUNCTION_NAME}
		/// </summary>
		/// <returns>Function root window</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowFunction{FUNCTION_CALL_NAME}(System.Action<FlowFunction{FUNCTION_CALL_NAME}Routes> onFunctionEnds) {
			
			return this.INTERNAL_FlowFunction{FUNCTION_CALL_NAME}(false, false, onFunctionEnds);
			
		}

		/// <summary>
		/// Call the Function {FUNCTION_CALL_NAME}.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Function: {FUNCTION_NAME}
		/// </summary>
		/// <returns>Function root window</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowHideFunction{FUNCTION_CALL_NAME}(System.Action<FlowFunction{FUNCTION_CALL_NAME}Routes> onFunctionEnds) {
			
			return this.INTERNAL_FlowFunction{FUNCTION_CALL_NAME}(true, false, onFunctionEnds);
			
		}

		/// <summary>
		/// Call the Function {FUNCTION_CALL_NAME}.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Function: {FUNCTION_NAME}
		/// </summary>
		/// <returns>Function root window</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowWaitHideFunction{FUNCTION_CALL_NAME}(System.Action<FlowFunction{FUNCTION_CALL_NAME}Routes> onFunctionEnds) {
			
			return this.INTERNAL_FlowFunction{FUNCTION_CALL_NAME}(true, true, onFunctionEnds);
			
		}

		/// <summary>
		/// Call the Function {FUNCTION_CALL_NAME}.
		/// Use this method to play transition effect on B window only.
		/// If you call Hide() on A window - it will hide with standard behaviour.
		/// Function: {FUNCTION_NAME}
		/// </summary>
		/// <returns>Function root window</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowFunction{FUNCTION_CALL_NAME}() {
			
			return this.INTERNAL_FlowFunction{FUNCTION_CALL_NAME}(false, false, null);
			
		}

		/// <summary>
		/// Call the Function {FUNCTION_CALL_NAME}.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Function: {FUNCTION_NAME}
		/// </summary>
		/// <returns>Function root window</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowHideFunction{FUNCTION_CALL_NAME}() {
			
			return this.INTERNAL_FlowFunction{FUNCTION_CALL_NAME}(true, false, null);
			
		}

		/// <summary>
		/// Call the Function {FUNCTION_CALL_NAME}.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Function: {FUNCTION_NAME}
		/// </summary>
		/// <returns>Function root window</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowWaitHideFunction{FUNCTION_CALL_NAME}() {
			
			return this.INTERNAL_FlowFunction{FUNCTION_CALL_NAME}(true, true, null);
			
		}
		
		private {CLASS_NAME_WITH_NAMESPACE} INTERNAL_FlowFunction{FUNCTION_CALL_NAME}(bool hide, bool hideWait, System.Action<FlowFunction{FUNCTION_CALL_NAME}Routes> onFunctionEnds, System.Action<{CLASS_NAME_WITH_NAMESPACE}> onParametersPassCall = null) {

			{CLASS_NAME_WITH_NAMESPACE} newWindow = default({CLASS_NAME_WITH_NAMESPACE});
			var item = UnityEngine.UI.Windows.Plugins.Flow.FlowSystem.GetAttachItem({FLOW_FROM_ID}, {FLOW_TO_ID});

			if (hide == true && hideWait == true) {

				this.Hide(() => {
					
					if (onFunctionEnds != null) {

						newWindow = WindowSystem.Show<{CLASS_NAME_WITH_NAMESPACE}>(
							(w) => WindowSystem.RegisterFunctionCallback(w, (index) => onFunctionEnds(new FlowFunction{FUNCTION_CALL_NAME}Routes(w, index))),
							item,
							onParametersPassCall
						);

					} else {
						
						newWindow = WindowSystem.Show<{CLASS_NAME_WITH_NAMESPACE}>(
							null,
							item,
							onParametersPassCall
						);
						
					}

					WindowSystemFlow.OnDoTransition(item.index, {FLOW_FROM_ID}, {FLOW_TO_ID}, hide);

				}, item);

			} else {

				if (onFunctionEnds != null) {
					
					newWindow = WindowSystem.Show<{CLASS_NAME_WITH_NAMESPACE}>(
						(w) => WindowSystem.RegisterFunctionCallback(w, (index) => onFunctionEnds(new FlowFunction{FUNCTION_CALL_NAME}Routes(w, index))),
						item,
						onParametersPassCall
					);

				} else {
					
					newWindow = WindowSystem.Show<{CLASS_NAME_WITH_NAMESPACE}>(
						null,
						item,
						onParametersPassCall
					);
					
				}
				
				WindowSystemFlow.OnDoTransition(item.index, {FLOW_FROM_ID}, {FLOW_TO_ID}, hide);
				
				if (hide == true) this.Hide(item);

			}

			return newWindow;
			
		}
		